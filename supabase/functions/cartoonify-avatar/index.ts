import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
);

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const formData = await req.formData();
    const image = formData.get('image') as File;
    const childId = formData.get('childId') as string;

    if (!image || !childId) {
      throw new Error('Image and childId are required');
    }

    console.log('Processing avatar cartoonification for child:', childId);

    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    // Convert image to blob for OpenAI
    const imageBuffer = await image.arrayBuffer();
    const imageBlob = new Blob([imageBuffer], { type: image.type });

    // Get the mask image from Supabase storage
    const { data: maskData } = await supabase.storage
      .from('StoryVoyagers')
      .download('masks/circle_512.png');

    if (!maskData) {
      throw new Error('Failed to get mask image');
    }

    console.log('Starting OpenAI DALL-E inpainting...');

    // Create FormData for OpenAI DALL-E edit request
    const openaiFormData = new FormData();
    openaiFormData.append('image', imageBlob);
    openaiFormData.append('mask', maskData);
    openaiFormData.append('prompt', 'A front-facing portrait of a child as a cartoon character, Pixar-style, light background, 2D illustration, symmetrical face, no background clutter, colorful, friendly expression');
    openaiFormData.append('n', '1');
    openaiFormData.append('size', '1024x1024');
    openaiFormData.append('response_format', 'url');

    const openaiResponse = await fetch('https://api.openai.com/v1/images/edits', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
      },
      body: openaiFormData,
    });

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text();
      console.error('OpenAI API error:', errorText);
      
      // Handle quota exceeded errors gracefully
      if (openaiResponse.status === 429) {
        throw new Error('OpenAI API quota exceeded. Please try again later.');
      }
      
      throw new Error(`OpenAI API error: ${openaiResponse.status} - ${errorText}`);
    }

    const openaiResult = await openaiResponse.json();
    const generatedImageUrl = openaiResult.data?.[0]?.url;

    if (!generatedImageUrl) {
      throw new Error('No cartoon avatar generated by OpenAI');
    }

    console.log('Avatar generated, downloading...');
    
    // Download the generated image
    const imageResponse = await fetch(generatedImageUrl);
    
    if (!imageResponse.ok) {
      throw new Error('Failed to download generated avatar');
    }

    const downloadedImageBlob = await imageResponse.blob();

    // Upload to Supabase Storage
    const fileName = `${childId}.png`;
    const { error: uploadError } = await supabase.storage
      .from('avatars')
      .upload(fileName, downloadedImageBlob, {
        contentType: 'image/png',
        upsert: true
      });

    if (uploadError) {
      throw uploadError;
    }

    // Get public URL
    const { data: { publicUrl } } = supabase.storage
      .from('avatars')
      .getPublicUrl(fileName);

    console.log('Avatar uploaded successfully:', publicUrl);

    // Update child's avatar_url
    const { error: updateError } = await supabase
      .from('children')
      .update({ avatar_url: publicUrl })
      .eq('id', childId);

    if (updateError) {
      throw updateError;
    }

    return new Response(JSON.stringify({
      success: true,
      message: 'Avatar cartoonified successfully!',
      avatar_url: publicUrl
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in cartoonify-avatar:', error);
    return new Response(JSON.stringify({
      error: (error as Error).message
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});